/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.18.0+dev-14-g1e2c2edab
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IssueTemplate : IssueTemplate represents an issue template for a repository

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IssueTemplate {
  #[serde(rename = "about")]
  about: Option<String>,
  #[serde(rename = "content")]
  content: Option<String>,
  #[serde(rename = "file_name")]
  file_name: Option<String>,
  #[serde(rename = "labels")]
  labels: Option<Vec<String>>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "ref")]
  _ref: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>
}

impl IssueTemplate {
  /// IssueTemplate represents an issue template for a repository
  pub fn new() -> IssueTemplate {
    IssueTemplate {
      about: None,
      content: None,
      file_name: None,
      labels: None,
      name: None,
      _ref: None,
      title: None
    }
  }

  pub fn set_about(&mut self, about: String) {
    self.about = Some(about);
  }

  pub fn with_about(mut self, about: String) -> IssueTemplate {
    self.about = Some(about);
    self
  }

  pub fn about(&self) -> Option<&String> {
    self.about.as_ref()
  }

  pub fn reset_about(&mut self) {
    self.about = None;
  }

  pub fn set_content(&mut self, content: String) {
    self.content = Some(content);
  }

  pub fn with_content(mut self, content: String) -> IssueTemplate {
    self.content = Some(content);
    self
  }

  pub fn content(&self) -> Option<&String> {
    self.content.as_ref()
  }

  pub fn reset_content(&mut self) {
    self.content = None;
  }

  pub fn set_file_name(&mut self, file_name: String) {
    self.file_name = Some(file_name);
  }

  pub fn with_file_name(mut self, file_name: String) -> IssueTemplate {
    self.file_name = Some(file_name);
    self
  }

  pub fn file_name(&self) -> Option<&String> {
    self.file_name.as_ref()
  }

  pub fn reset_file_name(&mut self) {
    self.file_name = None;
  }

  pub fn set_labels(&mut self, labels: Vec<String>) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: Vec<String>) -> IssueTemplate {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&Vec<String>> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> IssueTemplate {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set__ref(&mut self, _ref: String) {
    self._ref = Some(_ref);
  }

  pub fn with__ref(mut self, _ref: String) -> IssueTemplate {
    self._ref = Some(_ref);
    self
  }

  pub fn _ref(&self) -> Option<&String> {
    self._ref.as_ref()
  }

  pub fn reset__ref(&mut self) {
    self._ref = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> IssueTemplate {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

}



